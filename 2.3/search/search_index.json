{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"APLProcess is a cross-platform utility that enables you to easily start additional processes running Dyalog APL. This can be useful in a number of scenarios including: to distribute the processing load across multiple processors. This is what the isolate workspace does. to delegate processing to another process so that if there is some sort of failure, the primary process is not impacted. APLProcess runs on Windows, Linux and MacOS. ssh support, which will enable you to start an APL process on another platform using the ssh protocol, is forthcoming. Terminology Parent Process This is the process from where APLProcess is used to start \"child\" processes. Child Process This is a process started by a \"parent\" process. Each child process has a reference back to the \"parent\" process in the form of a \"parent process ID\" (PPID). Note While APLProcess itself is \u2395IO and \u2395ML insensitive, the examples in this documentation assume an environment of (\u2395IO \u2395ML)\u21901 . Obtaining APLProcess APLProcess is included with your Dyalog APL installation. To bring it into your workspace: Dyalog APL Version 19.0 and later (using Link ) ]import [ns] APLProcess or, under program control, do: \u2395SE.Link.Import [ns] 'APLProcess' where ns is an optional namespace name or reference in which to load APLProcess . If ns is not specified, APLProcess will be loaded into the current namespace. Dyalog APL versions before 19.0 (using SALT ) ]load APLProcess [-target=ns] or, under program control, do: \u2395SE.SALT.Load 'APLProcess [-target=ns]' -target=ns optionally specifies the namespace in which to load APLProcess where ns is the namespace name. If not specified, APLProcess will be loaded into the current namespace. Upgrading to the Latest APLProcess The documentation describes the latest released version of APLProcess which may be more recent than the version that came pre-installed with your Dyalog APL. Use APLProcess.Version to check the APLProcess version number. The latest released version of APLProcess can be downloaded from the Assets section of the latest release page on GitHub. APLProcess is Available as a Tatin Package Tatin is a package manager for APL-based packages. APLProcess is available as a Tatin package. If you have the Tatin client installed, you can load APLProcess using: ]TATIN.LoadPackages APLProcess The Tatin client will be included in your Dyalog installation beginning with Dyalog version 19.0. For earlier versions of Dyalog, refer to the Tatin website for instructions on installing the Tatin client.","title":"Overview"},{"location":"#terminology","text":"Parent Process This is the process from where APLProcess is used to start \"child\" processes. Child Process This is a process started by a \"parent\" process. Each child process has a reference back to the \"parent\" process in the form of a \"parent process ID\" (PPID). Note While APLProcess itself is \u2395IO and \u2395ML insensitive, the examples in this documentation assume an environment of (\u2395IO \u2395ML)\u21901 .","title":"Terminology"},{"location":"#obtaining-aplprocess","text":"APLProcess is included with your Dyalog APL installation. To bring it into your workspace:","title":"Obtaining APLProcess"},{"location":"#dyalog-apl-version-190-and-later-using-link","text":"]import [ns] APLProcess or, under program control, do: \u2395SE.Link.Import [ns] 'APLProcess' where ns is an optional namespace name or reference in which to load APLProcess . If ns is not specified, APLProcess will be loaded into the current namespace.","title":"Dyalog APL Version 19.0 and later (using Link)"},{"location":"#dyalog-apl-versions-before-190-using-salt","text":"]load APLProcess [-target=ns] or, under program control, do: \u2395SE.SALT.Load 'APLProcess [-target=ns]' -target=ns optionally specifies the namespace in which to load APLProcess where ns is the namespace name. If not specified, APLProcess will be loaded into the current namespace.","title":"Dyalog APL versions before 19.0 (using SALT)"},{"location":"#upgrading-to-the-latest-aplprocess","text":"The documentation describes the latest released version of APLProcess which may be more recent than the version that came pre-installed with your Dyalog APL. Use APLProcess.Version to check the APLProcess version number. The latest released version of APLProcess can be downloaded from the Assets section of the latest release page on GitHub.","title":"Upgrading to the Latest APLProcess"},{"location":"#aplprocess-is-available-as-a-tatin-package","text":"Tatin is a package manager for APL-based packages. APLProcess is available as a Tatin package. If you have the Tatin client installed, you can load APLProcess using: ]TATIN.LoadPackages APLProcess The Tatin client will be included in your Dyalog installation beginning with Dyalog version 19.0. For earlier versions of Dyalog, refer to the Tatin website for instructions on installing the Tatin client.","title":"APLProcess is Available as a Tatin Package"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2024 Dyalog Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"instance/","text":"You create an instance of APLProcess using either \u2395NEW or APLProcess.New as described in the Creating and Starting APLProcess . Settings APLProcess 's settings can be provided as arguments to APLProcess.New or \u2395NEW . You can also specify settings in the APLProcess instance before launching the new process. When provided as arguments, the settings can be specified in two ways. A vector of positional settings in the following order: Ws Args RunTime RideInit OutFile WorkingDir Detach If you want to supply settings with intermediate unspecified setting, you will need to supply the default value for the intermediate settings. For example, to specify the Ws and RideInit settings, you would need to specify /myApp '' 0 'SERVE:*:4502 , using the default values for Args and RunTime . A namespace containing named variables for the settings you wish to set. ns\u2190\u2395NS '' ns.(Ws RideInit)\u2190'/myApp' 'SERVE:*:4502' p\u2190APLProcess.New ns Note Remember that using \u2395NEW with arguments, in either positional or namespace form, will start the APL process automatically. Ws Description Ws is the name of the workspace that the child process will load Default '' Examples p.Ws\u2190\u2395WSID \u235d have the child process load the current workspace Notes An alternative to specifying Ws could be to use the Load and LX command line parameters. If you specify neither Ws nor the Load / LX command line parameters, the child process will sit there, languishing and doing nothing. Args Description Args is a character vector which represents the Dyalog command line parameters, if any, to be passed to the interpreter in the child process. Default '' Examples p.Args\u2190'Load=/myApp LX=Start' \u235d load code from the /myApp folder and run the Start function RunTime Description RunTime allows you to control the Dyalog interpreter that the child process will run. RunTime can have the following values: 0 indicating to use the same interpreter as the parent process. 1 indicating to use the runtime version of the parent process's interpreter. a character vector with the fully-qualified filename of the interpreter to run in the child process. Default 0 meaning do not use a runtime interpreter. Examples p.RunTime\u21901 \u235d use a runtime interpreter p.RunTime\u2190'/opt/mdyalog/19.0/64/unicode/dyalog' \u235d use a specific interpreter Notes RunTime is a somewhat overloaded setting that has evolved over time to take on additional meanings other than just whether to use a runtime interpreter. There is a pending capability to use RunTime to specify parameters in order to start an APL process on another maching using ssh, but that functionality is currently under development. RideInit Description RideInit specifies the RIDE_INIT command line parameter to use if you want to be able to RIDE into the child process's APL session. RideInit can be either: a character vector containing the setting for RIDE_INIT parameter. For example: SERVE:*:4504 the integer port number for RIDE to listen on in SERVE mode. 4504 would be the equivalent of specifying 'SERVE:*:4504' Default '' which means RIDE access is not enabled for the child process Examples p.RideInit\u21904504 \u235d run with SERVE:*:4504 p.RideInit\u2190'HTTP:*:4504 \u235d run with zero-footprint RIDE on port 4504 Notes APLProcess will always set the RIDE_INIT command line parameter in order to not inherit the setting from the parent APL process. OutFile Description OutFile specifies the name of a file to which the session output of the child APL process will be written. Default '' meaning session output will not be written to file. Examples p.OutFile\u2190'/home/me/Desktop/output.txt' WorkingDir Description WorkingDir specifies the working directory for the child APL process Default '' meaning use the default working directory for the child process's APL interpreter Examples p.WorkingDir\u2190'/home/me/Desktop' Detach Description Detach is a Boolean which indicates whether child process(es) should be terminated when the parent APLProcess instance is expunged. 0 indicates that the child process(es) should be terminated. 1 indicates that the child process(es) should not be terminated. Default 0 Examples p.Detach\u21901 \u235d do not close the child APL process when the parent's APLProcess instance is expunged. Notes If Detach is set to 0 , the child APL process will be terminated if the parent APL process exits; when set to 1 the child process will continue to run even if the parent APL process exits. Id Description Id is a read-only setting that returns the process ID of the child APL process. If the child APL process has not been started, Id is set to '' . Default '' Examples \u2002\u2002\u2002\u2002\u2002\u2002 (p\u2190APLProcess.New '/myApp' '' 0 4505).Run 0 \u2002\u2002\u2002\u2002\u2002\u2002 p.Id 18212 Proc Description Proc is not really a setting but rather an attempt to present consistent cross-platform interface. Proc is created when the child APL process is started. On Windows Proc is an instance of the .NET System.Diagnostic.Process class which has many more properties and methods than we expose in APLProcess . On non-Windows platforms, Proc is a namespace which emulates a subset of the System.Diagnostic.Process class which we deem necessary to start and manage the child APL process. Methods Run Description Run starts the child APL process. Syntax (rc msg)\u2190p.Run where rc and msg are 0 and '' respectively if no error occurred when starting the child APL process; otherwise rc and msg are the APL error number and message. Examples \u2002\u2002\u2002\u2002\u2002\u2002 (ns\u2190\u2395NS '').(Ws RideInit)\u2190'/myApp' 4505 \u2002\u2002\u2002\u2002\u2002\u2002 p\u2190APLProcess.New ns \u235d load /myApp and RIDE on port 4505 \u2002\u2002\u2002\u2002\u2002\u2002 p.Run 1 Kill Description Kill will attempt to terminate the child APL process. Syntax r\u2190p.Kill where r is 1 if the child APL process was terminated, 0 if the child APLProcess is still running Examples \u2002\u2002\u2002\u2002\u2002\u2002 p\u2190\u2395NEW APLProcess ('myApp' '' 0 4505) \u2002\u2002\u2002\u2002\u2002\u2002 p.Kill 1 HasExited Description HasExited reports whether the child APL process is running Syntax r\u2190p.HasExited where r is a Boolean where 1 indicates the child process is not running, 0 indicates the child process is running. Examples \u2002\u2002\u2002\u2002\u2002\u2002 p\u2190APLProcess.New '/myApp' '' 0 4505 \u2002\u2002\u2002\u2002\u2002\u2002 r.Run 1 \u2002\u2002\u2002\u2002\u2002\u2002 p.HasExited 0 \u2002\u2002\u2002\u2002\u2002\u2002 p.Kill 1 \u2002\u2002\u2002\u2002\u2002\u2002 p.HasExited 1","title":"APLProcess Instance"},{"location":"instance/#settings","text":"APLProcess 's settings can be provided as arguments to APLProcess.New or \u2395NEW . You can also specify settings in the APLProcess instance before launching the new process. When provided as arguments, the settings can be specified in two ways. A vector of positional settings in the following order: Ws Args RunTime RideInit OutFile WorkingDir Detach If you want to supply settings with intermediate unspecified setting, you will need to supply the default value for the intermediate settings. For example, to specify the Ws and RideInit settings, you would need to specify /myApp '' 0 'SERVE:*:4502 , using the default values for Args and RunTime . A namespace containing named variables for the settings you wish to set. ns\u2190\u2395NS '' ns.(Ws RideInit)\u2190'/myApp' 'SERVE:*:4502' p\u2190APLProcess.New ns Note Remember that using \u2395NEW with arguments, in either positional or namespace form, will start the APL process automatically.","title":"Settings"},{"location":"instance/#ws","text":"Description Ws is the name of the workspace that the child process will load Default '' Examples p.Ws\u2190\u2395WSID \u235d have the child process load the current workspace Notes An alternative to specifying Ws could be to use the Load and LX command line parameters. If you specify neither Ws nor the Load / LX command line parameters, the child process will sit there, languishing and doing nothing.","title":"Ws"},{"location":"instance/#args","text":"Description Args is a character vector which represents the Dyalog command line parameters, if any, to be passed to the interpreter in the child process. Default '' Examples p.Args\u2190'Load=/myApp LX=Start' \u235d load code from the /myApp folder and run the Start function","title":"Args"},{"location":"instance/#runtime","text":"Description RunTime allows you to control the Dyalog interpreter that the child process will run. RunTime can have the following values: 0 indicating to use the same interpreter as the parent process. 1 indicating to use the runtime version of the parent process's interpreter. a character vector with the fully-qualified filename of the interpreter to run in the child process. Default 0 meaning do not use a runtime interpreter. Examples p.RunTime\u21901 \u235d use a runtime interpreter p.RunTime\u2190'/opt/mdyalog/19.0/64/unicode/dyalog' \u235d use a specific interpreter Notes RunTime is a somewhat overloaded setting that has evolved over time to take on additional meanings other than just whether to use a runtime interpreter. There is a pending capability to use RunTime to specify parameters in order to start an APL process on another maching using ssh, but that functionality is currently under development.","title":"RunTime"},{"location":"instance/#rideinit","text":"Description RideInit specifies the RIDE_INIT command line parameter to use if you want to be able to RIDE into the child process's APL session. RideInit can be either: a character vector containing the setting for RIDE_INIT parameter. For example: SERVE:*:4504 the integer port number for RIDE to listen on in SERVE mode. 4504 would be the equivalent of specifying 'SERVE:*:4504' Default '' which means RIDE access is not enabled for the child process Examples p.RideInit\u21904504 \u235d run with SERVE:*:4504 p.RideInit\u2190'HTTP:*:4504 \u235d run with zero-footprint RIDE on port 4504 Notes APLProcess will always set the RIDE_INIT command line parameter in order to not inherit the setting from the parent APL process.","title":"RideInit"},{"location":"instance/#outfile","text":"Description OutFile specifies the name of a file to which the session output of the child APL process will be written. Default '' meaning session output will not be written to file. Examples p.OutFile\u2190'/home/me/Desktop/output.txt'","title":"OutFile"},{"location":"instance/#workingdir","text":"Description WorkingDir specifies the working directory for the child APL process Default '' meaning use the default working directory for the child process's APL interpreter Examples p.WorkingDir\u2190'/home/me/Desktop'","title":"WorkingDir"},{"location":"instance/#detach","text":"Description Detach is a Boolean which indicates whether child process(es) should be terminated when the parent APLProcess instance is expunged. 0 indicates that the child process(es) should be terminated. 1 indicates that the child process(es) should not be terminated. Default 0 Examples p.Detach\u21901 \u235d do not close the child APL process when the parent's APLProcess instance is expunged. Notes If Detach is set to 0 , the child APL process will be terminated if the parent APL process exits; when set to 1 the child process will continue to run even if the parent APL process exits.","title":"Detach"},{"location":"instance/#id","text":"Description Id is a read-only setting that returns the process ID of the child APL process. If the child APL process has not been started, Id is set to '' . Default '' Examples \u2002\u2002\u2002\u2002\u2002\u2002 (p\u2190APLProcess.New '/myApp' '' 0 4505).Run 0 \u2002\u2002\u2002\u2002\u2002\u2002 p.Id 18212","title":"Id"},{"location":"instance/#proc","text":"Description Proc is not really a setting but rather an attempt to present consistent cross-platform interface. Proc is created when the child APL process is started. On Windows Proc is an instance of the .NET System.Diagnostic.Process class which has many more properties and methods than we expose in APLProcess . On non-Windows platforms, Proc is a namespace which emulates a subset of the System.Diagnostic.Process class which we deem necessary to start and manage the child APL process.","title":"Proc"},{"location":"instance/#methods","text":"","title":"Methods"},{"location":"instance/#run","text":"Description Run starts the child APL process. Syntax (rc msg)\u2190p.Run where rc and msg are 0 and '' respectively if no error occurred when starting the child APL process; otherwise rc and msg are the APL error number and message. Examples \u2002\u2002\u2002\u2002\u2002\u2002 (ns\u2190\u2395NS '').(Ws RideInit)\u2190'/myApp' 4505 \u2002\u2002\u2002\u2002\u2002\u2002 p\u2190APLProcess.New ns \u235d load /myApp and RIDE on port 4505 \u2002\u2002\u2002\u2002\u2002\u2002 p.Run 1","title":"Run"},{"location":"instance/#kill","text":"Description Kill will attempt to terminate the child APL process. Syntax r\u2190p.Kill where r is 1 if the child APL process was terminated, 0 if the child APLProcess is still running Examples \u2002\u2002\u2002\u2002\u2002\u2002 p\u2190\u2395NEW APLProcess ('myApp' '' 0 4505) \u2002\u2002\u2002\u2002\u2002\u2002 p.Kill 1","title":"Kill"},{"location":"instance/#hasexited","text":"Description HasExited reports whether the child APL process is running Syntax r\u2190p.HasExited where r is a Boolean where 1 indicates the child process is not running, 0 indicates the child process is running. Examples \u2002\u2002\u2002\u2002\u2002\u2002 p\u2190APLProcess.New '/myApp' '' 0 4505 \u2002\u2002\u2002\u2002\u2002\u2002 r.Run 1 \u2002\u2002\u2002\u2002\u2002\u2002 p.HasExited 0 \u2002\u2002\u2002\u2002\u2002\u2002 p.Kill 1 \u2002\u2002\u2002\u2002\u2002\u2002 p.HasExited 1","title":"HasExited"},{"location":"release-notes/","text":"Version 2.3 First version of APLProcess residing in its own repository. Added Id property Allow a namespace as constructor argument","title":"Release Notes"},{"location":"release-notes/#version-23","text":"First version of APLProcess residing in its own repository. Added Id property Allow a namespace as constructor argument","title":"Version 2.3"},{"location":"samples/","text":"Remote Procedure Call (RPC) The sample RPC application is located in the /samples/rpc folder. The basic flow for the RPC application is: Load the rpc workspace. Run Start to start a child process which also loads the rpc workspace and starts a Conga \"command mode\" server. After a brief pause to allow the RPC server to come up, connect to the server. Use Do to send statements to the RPC server to be executed. Do returns a 2-element vector. The first element is the \u2395DM for the error, if any, caused by executing the statement. If no error occurred, '' is returned. The second element is the result of executing the statement, if no error has occurred in doing so, otherwise the offending statement is returned. Use Stop to stop the RPC server and tidy up the client environment. These steps are seen below ( ]BOX on is used to show the structure of results): )load /git/APLProcess/samples/rpc/rpc /git/APLProcess/samples/rpc/rpc.dws saved ... Sample Remote Procedure Call (RPC) application demonstrating the use of APLProcess Use Start '' to start the application with default settings. Start '' \u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25020\u2502Connected to RPC Server on port 8888\u2502 \u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Do '\u23733 3' \u250c\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502\u25021 1\u25021 2\u25021 3\u2502\u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502\u25022 1\u25022 2\u25022 3\u2502\u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502\u25023 1\u25023 2\u25023 3\u2502\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2514\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Do '\u00f70' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502DOMAIN ERROR\u2502\u00f70\u2502 \u2502\u00f70 \u2502 \u2502 \u2502\u2227 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518 Stop RPC Client closed and expunged RPC Server process terminated Conga shared library unloaded and Conga was erased The relevant lines in Start which use APLProcess are shown below: \u235d create and configure the instance of APLProcess RPC_Process\u2190APLProcess.New'' RPC_Process.Ws\u2190\u2395WSID \u235d workspace to load RPC_Process.Args\u2190'RPC_Port=',\u2355port \u235d port to use RPC_Process.Args,\u2190' RPC_Threaded=',\u2355threaded \u235d run the server in a thread in the child process? RPC_Process.RunTime\u2190runtime \u235d use runtime interpreter? RPC_Process.RideInit\u2190''(port+1)rideable\u2283\u23680 1\u2378rideable \u235d RIDE port RPC_Process.Detach\u2190~detach \u235d don't kill child process when p goes away \u235d try to launch the child process :If 0\u2260\u2283(rc msg)\u2190RPC_Process.Run msg\u2190'Failed to start APL process due to: ',\u220a\u2355msg \u21920 :EndIf \u2395DL 2 \u235d pause to let child process initialize :If ~RPC_Process.HasExited \u235d check to make sure the child process is there :If 0=\u2283rc\u2190RPCClt.Clt'RPCClient' 'localhost'port'Command' msg\u2190'Connected to RPC Server on port ',\u2355port msg,\u2190rideable/(\u2395UCS 13),'RIDE available on port ',\u23551+port rc\u21900 :Else msg\u2190'Could not connect to RPC Server on port ',(\u2355port),' due to ',\u220a\u2355(4\u2191rc)[1 3 4] :EndIf :EndIf","title":"Sample Uses"},{"location":"samples/#remote-procedure-call-rpc","text":"The sample RPC application is located in the /samples/rpc folder. The basic flow for the RPC application is: Load the rpc workspace. Run Start to start a child process which also loads the rpc workspace and starts a Conga \"command mode\" server. After a brief pause to allow the RPC server to come up, connect to the server. Use Do to send statements to the RPC server to be executed. Do returns a 2-element vector. The first element is the \u2395DM for the error, if any, caused by executing the statement. If no error occurred, '' is returned. The second element is the result of executing the statement, if no error has occurred in doing so, otherwise the offending statement is returned. Use Stop to stop the RPC server and tidy up the client environment. These steps are seen below ( ]BOX on is used to show the structure of results): )load /git/APLProcess/samples/rpc/rpc /git/APLProcess/samples/rpc/rpc.dws saved ... Sample Remote Procedure Call (RPC) application demonstrating the use of APLProcess Use Start '' to start the application with default settings. Start '' \u250c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25020\u2502Connected to RPC Server on port 8888\u2502 \u2514\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Do '\u23733 3' \u250c\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\u2502\u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\u2502 \u2502\u2502\u25021 1\u25021 2\u25021 3\u2502\u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502\u25022 1\u25022 2\u25022 3\u2502\u2502 \u2502\u2502\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\u2502 \u2502\u2502\u25023 1\u25023 2\u25023 3\u2502\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\u2502 \u2514\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Do '\u00f70' \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510 \u2502DOMAIN ERROR\u2502\u00f70\u2502 \u2502\u00f70 \u2502 \u2502 \u2502\u2227 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2518 Stop RPC Client closed and expunged RPC Server process terminated Conga shared library unloaded and Conga was erased The relevant lines in Start which use APLProcess are shown below: \u235d create and configure the instance of APLProcess RPC_Process\u2190APLProcess.New'' RPC_Process.Ws\u2190\u2395WSID \u235d workspace to load RPC_Process.Args\u2190'RPC_Port=',\u2355port \u235d port to use RPC_Process.Args,\u2190' RPC_Threaded=',\u2355threaded \u235d run the server in a thread in the child process? RPC_Process.RunTime\u2190runtime \u235d use runtime interpreter? RPC_Process.RideInit\u2190''(port+1)rideable\u2283\u23680 1\u2378rideable \u235d RIDE port RPC_Process.Detach\u2190~detach \u235d don't kill child process when p goes away \u235d try to launch the child process :If 0\u2260\u2283(rc msg)\u2190RPC_Process.Run msg\u2190'Failed to start APL process due to: ',\u220a\u2355msg \u21920 :EndIf \u2395DL 2 \u235d pause to let child process initialize :If ~RPC_Process.HasExited \u235d check to make sure the child process is there :If 0=\u2283rc\u2190RPCClt.Clt'RPCClient' 'localhost'port'Command' msg\u2190'Connected to RPC Server on port ',\u2355port msg,\u2190rideable/(\u2395UCS 13),'RIDE available on port ',\u23551+port rc\u21900 :Else msg\u2190'Could not connect to RPC Server on port ',(\u2355port),' due to ',\u220a\u2355(4\u2191rc)[1 3 4] :EndIf :EndIf","title":"Remote Procedure Call (RPC)"},{"location":"shared-methods/","text":"Shared methods are functions that can be accessed from the APLProcess class itself as well as from an instance of APLProcess . Most of the shared methods are used for diagnostic and informational purposes. The two most-commonly-used methods, New and Version , are presented first. The remaining methods are primarily intended for diagnostic and debugging and are presented in alphbetical order. New Description New creates and returns a new instance of APLProcess . Syntax p\u2190APLProcess.New args where args are the settings for the APLProcess instance as described in APLProcess Instance p is the APLProcess instance Examples Using positional arguments: p\u2190APLProcess.New '/myApp' 'DYALOG_NETCORE=1' 0 4502 Using a namespace argument: ns\u2190\u2395NS '' ns.(Ws Args RideInit)\u2190'/myApp' 'DYALOG_NETCORE' 4502 p\u2190APLProcess.New ns Notes APLProcess.New is an alternative to using \u2395NEW . The difference between using \u2395NEW and APLProcess.New with arguments is that \u2395NEW will automatically the child APL process whereas APLProcess.New will not. Version Description Version returns version information for APLProcess . It returns a 3-element array of [1] 'APLProcess' [2] The version number in the format major.minor.patch [3] The date of the version in the format YYYY-MM-DD Syntax ver\u2190APLProcess.Version Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.Version \u2002 APLProcess 2.3.0 2024-07-06 GetCurrentExecutable Description GetCurrentExecutable returns the full path to the current Dyalog APL executable. Syntax ver\u2190APLProcess.Version Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.GetCurrentExecutable C:\\Program Files\\Dyalog\\Dyalog APL-64 19.0 Unicode\\dyalog.exe GetCurrentProcessId Description GetCurrentProcessId returns the process ID for the current process. Syntax ver\u2190APLProcess.GetCurrentProcessId Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.GetCurrentProcessId 28288 IsAIX Description IsAIX returns 1 if the current platform is AIX, 0 otherwise. Syntax ver\u2190APLProcess.IsAIX IsMac Description IsMac returns 1 if the current platform is macOS, 0 otherwise. Syntax ver\u2190APLProcess.IsMac IsNetCore Description IsNetCore returns 1 if the current platform is using .NET, 0 otherwise. Syntax ver\u2190APLProcess.IsNetCore Notes Given the schizophrenic naming of .NET by Microsoft, .NET Core is now known as just .NET, not to be confused .NET Framework, which sounds like it should also be .NET, but it's not. Got it? IsRunning Description IsRunning returns 1 if the process identified by its arguments is currently running, 0 otherwise. Syntax APLProcess.IsRunning pid [exe] [startTS] where pid is the process ID (required) exe is the executable name (optional, Windows only) startTS is the process's start time in \u2395TS format (optional, Windows only) Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.IsRunning 28288 'dyalog' \u235d Windows only 1 \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.(IsRunning GetCurrentProcessId) \u235d should always return 1 1 Notes On non-Windows platforms, the pid is the only argument available. IsWin Description IsWin returns 1 if the current platform is Windows, 0 otherwise. Syntax ver\u2190APLProcess.Version KillChildren Description KillChildren will attempt to terminate all child processes running a specific executable process name. Syntax r\u2190APLProcess.KillChildren exe where exe is the name of the process(es) to terminate. r is a 2-column matrix containing information for processes that were not successfully terminated. The columns contain [;1] the process id [;2] the process name. Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.KillChildren 'dyalog' \u235d terminal all dyalog processes started by this process Notes KillChildren is intended to be a utility to help clean up child processes that are still running after their APLProcess instance has been expunged as would be the case if Detach is set to 1 . ListProcesses Description ListProcesses returns process ids and names. Syntax r\u2190{all} APLProcess.ListProcesses procName where procName is the name of the process(es) to return, or '' for all processes all is optional and set to 1 to return all matching processes, otherwise ListProcesses will return only child processes of the current process (the default). r is a 2-column matrix of [;1] process ids, [;2] process names Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.ListProcesses 'dyalog' 31568 dyalog \u2002\u2002\u2002\u2002\u2002\u2002 \u22621 APLProcess.ListProcesses '' \u235d how many processes running? 350 Notes ListProcesses excludes the current process from its result. MyDNSName Description MyDNSName returns the computer name when running on Windows or host name when running on non-Windows platforms. Syntax r\u2190APLProcess.MyDNSName Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.MyDNSName my-computer-name Platform Description Platform returns a 3-character vector indicating the current platform. It is literally 3\u2191\u2283#.\u2395WG 'APLVersion' . Syntax r\u2190APLProcess.Platform ProcessUsingPort Description ProcessUsingPort returns the process id that is listening on the port number passed as the argument. Syntax r\u2190APLProcess.ProcessUsingPort port where port is an integer port number r is the process id, if any, listening on port Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.ProcessUsingPort 8080 26702 Notes ProcessUsingPort can be useful for identifying a process that's already using a port you expected to be available. Stop Description Stop attempts to terminate the process identified by the process id passed as the argument; returning 1 if the process was terminated, 0 otherwise. Syntax r\u2190APLProcess.Stop pid where pid is the process id of the process to be terminated r is a Boolean where 1 indicates the process was terminated, 0 otherwise. Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.Stop 12306 1 Notes Stop will return 1 if there no process with an id matching pid . UsingSystemDiagnostics Description UsingSystemDiagnostics returns the .NET namespace and dll that will be used under Windows. Syntax ver\u2190APLProcess.UsingSystemDiagnostics Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.UsingSystemDiagnostics \u235d under .NET Framework System,System.dll \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.UsingSystemDiagnostics \u235d under .NET System,System.Diagnostics.Process Notes The result of UsingSystemDiagnostics is used to set \u2395USING within APLProcess _SH Description _SH is a cover for \u2395SH and is used within APLProcess primarily for non-Windows commands. Syntax r\u2190APLProcess._SH cmd where cmd is the character vector command to execute r is the output from the command returned as a vector of character vectors Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess._SH 'whoami' pi Notes If a trappable error occurs when executing the command, r will be an empty vector.","title":"Shared Methods"},{"location":"shared-methods/#new","text":"Description New creates and returns a new instance of APLProcess . Syntax p\u2190APLProcess.New args where args are the settings for the APLProcess instance as described in APLProcess Instance p is the APLProcess instance Examples Using positional arguments: p\u2190APLProcess.New '/myApp' 'DYALOG_NETCORE=1' 0 4502 Using a namespace argument: ns\u2190\u2395NS '' ns.(Ws Args RideInit)\u2190'/myApp' 'DYALOG_NETCORE' 4502 p\u2190APLProcess.New ns Notes APLProcess.New is an alternative to using \u2395NEW . The difference between using \u2395NEW and APLProcess.New with arguments is that \u2395NEW will automatically the child APL process whereas APLProcess.New will not.","title":"New"},{"location":"shared-methods/#version","text":"Description Version returns version information for APLProcess . It returns a 3-element array of [1] 'APLProcess' [2] The version number in the format major.minor.patch [3] The date of the version in the format YYYY-MM-DD Syntax ver\u2190APLProcess.Version Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.Version \u2002 APLProcess 2.3.0 2024-07-06","title":"Version"},{"location":"shared-methods/#getcurrentexecutable","text":"Description GetCurrentExecutable returns the full path to the current Dyalog APL executable. Syntax ver\u2190APLProcess.Version Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.GetCurrentExecutable C:\\Program Files\\Dyalog\\Dyalog APL-64 19.0 Unicode\\dyalog.exe","title":"GetCurrentExecutable"},{"location":"shared-methods/#getcurrentprocessid","text":"Description GetCurrentProcessId returns the process ID for the current process. Syntax ver\u2190APLProcess.GetCurrentProcessId Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.GetCurrentProcessId 28288","title":"GetCurrentProcessId"},{"location":"shared-methods/#isaix","text":"Description IsAIX returns 1 if the current platform is AIX, 0 otherwise. Syntax ver\u2190APLProcess.IsAIX","title":"IsAIX"},{"location":"shared-methods/#ismac","text":"Description IsMac returns 1 if the current platform is macOS, 0 otherwise. Syntax ver\u2190APLProcess.IsMac","title":"IsMac"},{"location":"shared-methods/#isnetcore","text":"Description IsNetCore returns 1 if the current platform is using .NET, 0 otherwise. Syntax ver\u2190APLProcess.IsNetCore Notes Given the schizophrenic naming of .NET by Microsoft, .NET Core is now known as just .NET, not to be confused .NET Framework, which sounds like it should also be .NET, but it's not. Got it?","title":"IsNetCore"},{"location":"shared-methods/#isrunning","text":"Description IsRunning returns 1 if the process identified by its arguments is currently running, 0 otherwise. Syntax APLProcess.IsRunning pid [exe] [startTS] where pid is the process ID (required) exe is the executable name (optional, Windows only) startTS is the process's start time in \u2395TS format (optional, Windows only) Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.IsRunning 28288 'dyalog' \u235d Windows only 1 \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.(IsRunning GetCurrentProcessId) \u235d should always return 1 1 Notes On non-Windows platforms, the pid is the only argument available.","title":"IsRunning"},{"location":"shared-methods/#iswin","text":"Description IsWin returns 1 if the current platform is Windows, 0 otherwise. Syntax ver\u2190APLProcess.Version","title":"IsWin"},{"location":"shared-methods/#killchildren","text":"Description KillChildren will attempt to terminate all child processes running a specific executable process name. Syntax r\u2190APLProcess.KillChildren exe where exe is the name of the process(es) to terminate. r is a 2-column matrix containing information for processes that were not successfully terminated. The columns contain [;1] the process id [;2] the process name. Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.KillChildren 'dyalog' \u235d terminal all dyalog processes started by this process Notes KillChildren is intended to be a utility to help clean up child processes that are still running after their APLProcess instance has been expunged as would be the case if Detach is set to 1 .","title":"KillChildren"},{"location":"shared-methods/#listprocesses","text":"Description ListProcesses returns process ids and names. Syntax r\u2190{all} APLProcess.ListProcesses procName where procName is the name of the process(es) to return, or '' for all processes all is optional and set to 1 to return all matching processes, otherwise ListProcesses will return only child processes of the current process (the default). r is a 2-column matrix of [;1] process ids, [;2] process names Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.ListProcesses 'dyalog' 31568 dyalog \u2002\u2002\u2002\u2002\u2002\u2002 \u22621 APLProcess.ListProcesses '' \u235d how many processes running? 350 Notes ListProcesses excludes the current process from its result.","title":"ListProcesses"},{"location":"shared-methods/#mydnsname","text":"Description MyDNSName returns the computer name when running on Windows or host name when running on non-Windows platforms. Syntax r\u2190APLProcess.MyDNSName Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.MyDNSName my-computer-name","title":"MyDNSName"},{"location":"shared-methods/#platform","text":"Description Platform returns a 3-character vector indicating the current platform. It is literally 3\u2191\u2283#.\u2395WG 'APLVersion' . Syntax r\u2190APLProcess.Platform","title":"Platform"},{"location":"shared-methods/#processusingport","text":"Description ProcessUsingPort returns the process id that is listening on the port number passed as the argument. Syntax r\u2190APLProcess.ProcessUsingPort port where port is an integer port number r is the process id, if any, listening on port Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.ProcessUsingPort 8080 26702 Notes ProcessUsingPort can be useful for identifying a process that's already using a port you expected to be available.","title":"ProcessUsingPort"},{"location":"shared-methods/#stop","text":"Description Stop attempts to terminate the process identified by the process id passed as the argument; returning 1 if the process was terminated, 0 otherwise. Syntax r\u2190APLProcess.Stop pid where pid is the process id of the process to be terminated r is a Boolean where 1 indicates the process was terminated, 0 otherwise. Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.Stop 12306 1 Notes Stop will return 1 if there no process with an id matching pid .","title":"Stop"},{"location":"shared-methods/#usingsystemdiagnostics","text":"Description UsingSystemDiagnostics returns the .NET namespace and dll that will be used under Windows. Syntax ver\u2190APLProcess.UsingSystemDiagnostics Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.UsingSystemDiagnostics \u235d under .NET Framework System,System.dll \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess.UsingSystemDiagnostics \u235d under .NET System,System.Diagnostics.Process Notes The result of UsingSystemDiagnostics is used to set \u2395USING within APLProcess","title":"UsingSystemDiagnostics"},{"location":"shared-methods/#_sh","text":"Description _SH is a cover for \u2395SH and is used within APLProcess primarily for non-Windows commands. Syntax r\u2190APLProcess._SH cmd where cmd is the character vector command to execute r is the output from the command returned as a vector of character vectors Examples \u2002\u2002\u2002\u2002\u2002\u2002 APLProcess._SH 'whoami' pi Notes If a trappable error occurs when executing the command, r will be an empty vector.","title":"_SH"},{"location":"userguide/","text":"APLProcess starts a new Dyalog APL interpreter in another process. What that process does is entirely up to you. Common uses include: setting up a Remote Procedure Call (RPC) service to distribute processing load between multiple APL processes. delegating a long-running task to another APL process delegating processing to another APL process to reduce the potential impact of code failure. If the code running in another process fails, it's less likely to impact the processing in the current APL session. Note Currently APLProcess can start new APL processes only on the same platform. As most processors have multiple cores, this can still help distribute processing load and increase throughput. The ability to start new APL processes on other platforms using ssh is under development. Terminology Even though APLProcess is implemented as a Dyalog APL class, you do not need to know much about the object-oriented programming (OOP) features of Dyalog APL. Instance An \"instance\" of APLProcess is created when you call APLProcess.New or the use the \u2395NEW system function. Instances are independent of one another. Method In OOP terminology, APL functions within classes are called \"methods\". An individual method can either apply only to an instance (this is called an \"instance method\"), or to the class itself (this is called a \"shared method\"). Field or Setting In OOP terminology, variables are called \"fields\", but for this documentation, we'll refer to them as \"settings\". Throughout this document we will use the following terms with the following meanings: Parent Process This is the process from where APLProcess is used to start \"child\" processes. Child Process This is an APL process started by a \"parent\" process. Each child process has a reference back to the \"parent\" process in the form of a \"parent process ID\" (PPID). p An instance of APLProcess which is the result of running APLProcess.New or using \u2395NEW . Of course, you can use whatever name you prefer in your code. Creating and starting APLProcess There are three ways to create and run an instance of APLProcess . Use \u2395NEW with constructor arguments This will start an APL process and return an APLProcess instance. p\u2190\u2395NEW APLProcess ('/myApp' '' 0 'SERVE:*:4502') Use \u2395NEW without constructor arguments This will create and return an instance of APLProcess . You can then set whatever parameters you need and start the APL process using the Run method. p\u2190\u2395NEW APLProcess p.(Ws RideInit)\u2190'/myApp' 'SERVE:*:4502' p.Run Use APLProcess.New APLProcess.New is a shared method that will create and return an instance of APLProcess , applying any arguments as parameters. You can then start the APL process using the Run method. Supplying '' as the argument to APLProcess.New is equivalent of using \u2395NEW APLProcess without any arguments. p\u2190APLProcess.New '/myApp' '' 0 'SERVE:*:4502' p.Run Stopping an APL Process Use p.Kill to terminate the child APL process. p.kill will return 1 if the child process was successfully terminated, 0 otherwise. Checking if an APL Process is Running Use p.HasExited to check if a child process is running. p.HasExited will return 1 is the child process is not running and 0 if the child process is running. Cross-Platform Functionality To the extent possible, APLProcess presents a consistent API across all platforms on which Dyalog APL runs. This way you shouldn't have to change your application code that uses APLProcess if you're using multiple platforms. Once the child process has been started, the APLProcess instance contains an object named Proc . Under Windows, Proc is an instance of the .NET System.Diagnostics.Process class. On non-Windows platforms, Proc is a namespace with elements named the same as a selected subset of the features of the .NET class.","title":"User Guide"},{"location":"userguide/#terminology","text":"Even though APLProcess is implemented as a Dyalog APL class, you do not need to know much about the object-oriented programming (OOP) features of Dyalog APL. Instance An \"instance\" of APLProcess is created when you call APLProcess.New or the use the \u2395NEW system function. Instances are independent of one another. Method In OOP terminology, APL functions within classes are called \"methods\". An individual method can either apply only to an instance (this is called an \"instance method\"), or to the class itself (this is called a \"shared method\"). Field or Setting In OOP terminology, variables are called \"fields\", but for this documentation, we'll refer to them as \"settings\". Throughout this document we will use the following terms with the following meanings: Parent Process This is the process from where APLProcess is used to start \"child\" processes. Child Process This is an APL process started by a \"parent\" process. Each child process has a reference back to the \"parent\" process in the form of a \"parent process ID\" (PPID). p An instance of APLProcess which is the result of running APLProcess.New or using \u2395NEW . Of course, you can use whatever name you prefer in your code.","title":"Terminology"},{"location":"userguide/#creating-and-starting-aplprocess","text":"There are three ways to create and run an instance of APLProcess .","title":"Creating and starting APLProcess"},{"location":"userguide/#use-new-with-constructor-arguments","text":"This will start an APL process and return an APLProcess instance. p\u2190\u2395NEW APLProcess ('/myApp' '' 0 'SERVE:*:4502')","title":"Use \u2395NEW with constructor arguments"},{"location":"userguide/#use-new-without-constructor-arguments","text":"This will create and return an instance of APLProcess . You can then set whatever parameters you need and start the APL process using the Run method. p\u2190\u2395NEW APLProcess p.(Ws RideInit)\u2190'/myApp' 'SERVE:*:4502' p.Run","title":"Use \u2395NEW without constructor arguments"},{"location":"userguide/#use-aplprocessnew","text":"APLProcess.New is a shared method that will create and return an instance of APLProcess , applying any arguments as parameters. You can then start the APL process using the Run method. Supplying '' as the argument to APLProcess.New is equivalent of using \u2395NEW APLProcess without any arguments. p\u2190APLProcess.New '/myApp' '' 0 'SERVE:*:4502' p.Run","title":"Use APLProcess.New"},{"location":"userguide/#stopping-an-apl-process","text":"Use p.Kill to terminate the child APL process. p.kill will return 1 if the child process was successfully terminated, 0 otherwise.","title":"Stopping an APL Process"},{"location":"userguide/#checking-if-an-apl-process-is-running","text":"Use p.HasExited to check if a child process is running. p.HasExited will return 1 is the child process is not running and 0 if the child process is running.","title":"Checking if an APL Process is Running"},{"location":"userguide/#cross-platform-functionality","text":"To the extent possible, APLProcess presents a consistent API across all platforms on which Dyalog APL runs. This way you shouldn't have to change your application code that uses APLProcess if you're using multiple platforms. Once the child process has been started, the APLProcess instance contains an object named Proc . Under Windows, Proc is an instance of the .NET System.Diagnostics.Process class. On non-Windows platforms, Proc is a namespace with elements named the same as a selected subset of the features of the .NET class.","title":"Cross-Platform Functionality"}]}